# We need to give time to karpenter to clean up EC2 instances before we remove it from the cluster.
# With this job we block the deletion of the karpenter app, unless there are no nodeclaims, meaning
# there are no karpenter node pools or karpenter has already removed all the ec2 instances.
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "resource.default.name" . }}-nodeclaims-cleanup
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "0"
  labels:
    {{- include "labels.common" . | nindent 4 }}
spec:
  template:
    metadata:
      labels:
        {{- include "labels.common" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "resource.default.name" . }}-nodeclaims-cleanup
      containers:
      - name: kubectl
        image: gsoci.azurecr.io/giantswarm/docker-kubectl:1.25.4
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
            - ALL
        command:
        - /bin/sh
        args:
        - -c
        - |
          echo "Fetching ${CLUSTER} kubeconfig..."
          kubectl get secret -n ${NAMESPACE} ${CLUSTER}-kubeconfig -o jsonpath='{.data.value}' | base64 -d > /tmp/${CLUSTER}-kubeconfig
          if [ ! -f /tmp/${CLUSTER}-kubeconfig ]; then
            echo "Failed to fetch kubeconfig for cluster ${CLUSTER}. Assuming it is already deleted."
            exit 0
          fi

          echo "Blocking deletion of the Chart until there are no nodeclaims.karpenter.sh CRs in the cluster"
          kubectl --kubeconfig /tmp/${CLUSTER}-kubeconfig --v=6 wait --for=delete nodeclaims.karpenter.sh --all --timeout=5m
        resources:
          requests:
            cpu: 10m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 256Mi
      restartPolicy: Never
  ttlSecondsAfterFinished: 86400 # 24h
