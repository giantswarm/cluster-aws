{{/* AWS-specific cilium Helm values*/}}
{{/* https://github.com/giantswarm/cilium-app/blob/main/helm/cilium/values.yaml*/}}
{{- define "awsCiliumHelmValues" }}
provider: capa
image:
  registry: {{ include "awsContainerImageRegistry" $ }}
{{- if eq (required "global.connectivity.cilium.ipamMode is required"  .Values.global.connectivity.cilium.ipamMode) "eni" }}
# https://docs.cilium.io/en/v1.14/network/concepts/routing/#id5
ipam:
  mode: eni
eni:
  enabled: true
  awsReleaseExcessIPs: true
enableIPv4Masquerade: false
tunnel: disabled
cluster:
    # Used by cilium to tag ENIs it creates and be able to filter and clean them up.
    name: {{ include "resource.default.name" $ | quote }}
cni:
  # Use https://github.com/giantswarm/cilium-app/blob/main/helm/cilium/templates/cilium-cni-configmap.yaml
  customConf: true
  configMap: cilium-cni-configuration
extraEnv:
  - name: CNI_CONF_NAME
    value: "21-cilium.conflist"
{{- else if eq (required "global.connectivity.cilium.ipamMode is required"  .Values.global.connectivity.cilium.ipamMode) "kubernetes" }}
{{- /* Use default from `cluster` chart */}}
{{- end }}

hubble:
  relay:
    extraEnv:
    - name: GOPS_CONFIG_DIR
      value: /tmp
    extraVolumeMounts:
    - name: tmp-dir
      mountPath: /tmp
    extraVolumes:
    - emptyDir: {}
      name: tmp-dir
    securityContext:
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 65532
      runAsGroup: 65532
      capabilities:
        drop:
          - ALL
    tolerations:
      - key: "node.cluster.x-k8s.io/uninitialized"
        operator: "Exists"
        effect: "NoSchedule"
  ui:
    tolerations:
      - key: "node.cluster.x-k8s.io/uninitialized"
        operator: "Exists"
        effect: "NoSchedule"
    backend:
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
        seccompProfile:
          type: RuntimeDefault
    frontend:
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
    securityContext:
      enabled: true
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
operator:
  extraEnv:
  - name: GOPS_CONFIG_DIR
    value: /tmp
  extraVolumeMounts:
  - name: tmp-dir
    mountPath: /tmp
  extraVolumes:
  - emptyDir: {}
    name: tmp-dir
  podSecurityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65532
    seccompProfile:
      type: RuntimeDefault
defaultPolicies:
  enabled: false
  remove: true

  tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
extraPolicies:
  remove: true

  allowEgressToCoreDNS:
    enabled: false
  allowEgressToProxy:
    enabled: false
    httpProxy: {{ $.Values.global.connectivity.proxy.httpProxy | quote }}
    httpsProxy: {{ $.Values.global.connectivity.proxy.httpsProxy | quote }}
{{- end }}
